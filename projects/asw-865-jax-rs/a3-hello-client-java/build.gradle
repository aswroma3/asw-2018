/* 
 * Gradle build file per un'applicazione basata su WS REST, 
 * con la definizione di client Java per un servizio REST. 
 * 
 * - gradle build compila, crea i jar e prepara la distribuzione 
 * - gradle clean cancella i jar file e la distribuzione 
 */ 

/* definisce il nome del web service rest */ 
ext.restName = 'hello'

/* definisce il nome del client e della sua main class */ 
ext.appName = restName + '-client'
ext.mainClass = 'asw.rest.hello.client.Main'

/* progetti i cui jar che devono essere rilasciati lato server o client */ 
def clientSideProjects = [':rest-client']

subprojects {
    apply plugin: 'java'

    repositories {
        flatDir { 
           dirs "../../../libraries"
        }
        mavenCentral()
    }

    configurations {
        libs
    }

    dependencies {
        testCompile 'junit:junit:4.12'
    }

}

project(':rest-client') {
    dependencies {
        compile 'javax.ws.rs:javax.ws.rs-api:2.1'

        libs 'javax.ws.rs:javax.ws.rs-api:2.1'
        libs 'org.glassfish.jersey.core:jersey-common:2.26'
        libs 'org.jboss.resteasy:resteasy-client:3.1.4.Final'
    }
    
    jar {
        baseName = appName  
        manifest {
            attributes 'Main-Class': mainClass
            // classpath definito nello script run-rest-client.sh 
        }
    }
         
}

/* 
 * DISTRIBUZIONE - CLIENT  
 */ 

// copia nella cartella dist/client tutti i file di interesse  

// copia nella cartella dist i file jar dei client  
task copyClientJarFiles(type: Copy, dependsOn: subprojects.build) {
    setIncludeEmptyDirs(false)
    subprojects.each { subproject -> 
        from subproject.buildDir  
        include 'libs/**'
    }
    into 'dist/client'
}

// copia nella cartella dist/client/libs i file jar delle librerie di interesse  
task copyClientLibFiles(type: Copy) {
    clientSideProjects.collect {
        project(it) { subproject -> 
            from subproject.configurations.libs  
            include '**'
        }
        into 'dist/client/libs'
    }
}

// copia nella cartella dist/client tutti gli script  
task copyClientResources(type: Copy) {
    from 'resources/client' 
    into 'dist/client'
    rename { String fileName ->
        fileName.replace('-TEMPLATE', '')
    }
    filter { String line -> 
        line.replace('@@@APPNAME@@@', appName)
            .replace('@@@MAINCLASS@@@', mainClass)
    }
}

// copia tutti i file di interesse nella cartella dist 
task dist(dependsOn: [copyClientJarFiles, copyClientLibFiles, copyClientResources]) {
}

task build(dependsOn: dist) {
}

/* 
 * CLEAN 
 * necessario perché il progetto principale non è un progetto Java 
 */ 

task deleteDist(type: Delete) {
    delete 'dist'
}

task clean(dependsOn: deleteDist) {
}

